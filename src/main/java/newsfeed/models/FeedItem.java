package newsfeed.models;

import newsfeed.cache.NewsFeedCache;

import java.util.ArrayList;
import java.util.List;

/**
 * @author ravi.bhatt
 * @version FeedItem: FeedItem.java, v 1.0 19/06/21 10:10 am ravi.bhatt Exp $$
 */
public class FeedItem implements Comparable<FeedItem>{
    /**  should be autogenerated starting from 001 to .....n **/
    private String feedItemId;
    private String userName;
    private String content;
    private int noOfUpVotes;
    private int noOfDownVotes;
    private String createdTime;
    private List<FeedItem> comments;

    //private List<FeedItem> sharedPosts;

    public void addComment(FeedItem comment){
        comments.add(comment);
    }

    public FeedItem(String feedItemId , String userName, String content, String createdTime) {
        this.feedItemId = feedItemId;
        this.userName = userName;
        this.content = content;
        this.createdTime = createdTime;
        this.comments = new ArrayList<FeedItem>();
    }

    public String getFeedItemId() {
        return feedItemId;
    }

    public String getUserName() {
        return userName;
    }

    public String getContent() {
        return content;
    }

    public int getNoOfUpVotes() {
        return noOfUpVotes;
    }

    public int getNoOfDownVotes() {
        return noOfDownVotes;
    }

    public String getCreatedTime() {
        return createdTime;
    }

    public void setNoOfUpVotes(int noOfUpVotes) {
        this.noOfUpVotes = noOfUpVotes;
    }

    public void setNoOfDownVotes(int noOfDownVotes) {
        this.noOfDownVotes = noOfDownVotes;
    }

    public List<FeedItem> getComments() {
        return comments;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append("id: "+this.getFeedItemId());
        builder.append("\n("+this.getNoOfUpVotes()+" upvote,"+this.getNoOfDownVotes()+" downvotes)");
        builder.append("\n"+this.getUserName());
        builder.append("\n"+this.getContent());
        builder.append("\n"+this.getCreatedTime());
        return builder.toString();
    }

    @Override
    public int compareTo(FeedItem feedItem) {
        int followList1 = NewsFeedCache.getUser(this.getUserName()).getUserFollowList().size();
        int followList2 = NewsFeedCache.getUser(feedItem.getUserName()).getUserFollowList().size();
        int score1 = this.noOfUpVotes - this.getNoOfDownVotes();
        int score2 = feedItem.noOfUpVotes - feedItem.getNoOfDownVotes();
        if(followList1!=followList2){
            return followList1 - followList2;
        }else if(score1!=score2){
            return score1-score2;
        }else if(this.getComments().size() != feedItem.getComments().size()){
            return this.getComments().size()-feedItem.getComments().size();
        }else{
            return feedItem.getCreatedTime().compareTo(this.getCreatedTime());
        }
    }
}
